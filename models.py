from datetime import datetime, timezone

from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from sqlalchemy.dialects.postgresql import ENUM

# SQLAlchemy instance, initialized in app factory
db = SQLAlchemy()


class ClassModel(db.Model):
    """Class model for organizing students into classes."""
    
    __tablename__ = "classes"
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)
    division = db.Column(db.String(10), nullable=True)  # e.g., "A", "B", "1", "2"
    semester_id = db.Column(db.Integer, db.ForeignKey("semesters.id"), nullable=True, index=True)
    branch_id = db.Column(db.Integer, db.ForeignKey("branches.id"), nullable=True, index=True)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    students = db.relationship("User", back_populates="class_obj", lazy=True)
    sessions = db.relationship("SessionModel", back_populates="class_obj", lazy=True)
    teacher_classes = db.relationship("TeacherClass", back_populates="class_obj", lazy=True)
    semester = db.relationship("Semester", back_populates="classes")
    branch = db.relationship("Branch", back_populates="classes")


class TeacherClass(db.Model):
    """Mapping table for teacher-class relationships."""
    
    __tablename__ = "teacher_classes"
    
    id = db.Column(db.Integer, primary_key=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    class_id = db.Column(db.Integer, db.ForeignKey("classes.id"), nullable=False, index=True)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    teacher = db.relationship("User", back_populates="teacher_classes")
    class_obj = db.relationship("ClassModel", back_populates="teacher_classes")
    
    __table_args__ = (
        db.UniqueConstraint("teacher_id", "class_id", name="uq_teacher_class"),
    )


class User(db.Model, UserMixin):
    """Application user with role-based access (admin/student/teacher)."""

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(255), unique=True, nullable=False, index=True)
    password_hash = db.Column(db.String(255), nullable=False)
    role = db.Column(ENUM("admin", "student", "teacher", "hod", "principal", name="user_roles"),nullable=False,index=True)
    roll_number = db.Column(db.String(20), nullable=True, index=True)  # For students
    class_id = db.Column(db.Integer, db.ForeignKey("classes.id"), nullable=True, index=True)  # For students
    department_id = db.Column(db.Integer, db.ForeignKey("departments.id"), nullable=True, index=True)  # For HODs
    status = db.Column(ENUM("Active", "Alumni", name="student_status"), default="Active", nullable=True)  # For students
    is_active = db.Column(db.Boolean, default=True, nullable=False)  # Active status for filtering
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))

    # Relationships
    attendances = db.relationship("Attendance", back_populates="user", lazy=True)
    class_obj = db.relationship("ClassModel", back_populates="students", lazy=True)
    teacher_classes = db.relationship("TeacherClass", back_populates="teacher", lazy=True)
    department = db.relationship("Department", backref="hod")


class SessionModel(db.Model):
    """Attendance session generated by a teacher and encoded into QR code."""

    __tablename__ = "sessions"

    id = db.Column(db.Integer, primary_key=True)
    session_uuid = db.Column(db.String(64), unique=True, nullable=False, index=True)
    expiry = db.Column(db.DateTime(timezone=True), nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    class_id = db.Column(db.Integer, db.ForeignKey("classes.id"), nullable=False, index=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    is_locked = db.Column(db.Boolean, default=False)  # Locked after 1 hour
    qr_expiry_seconds = db.Column(db.Integer, default=30)  # QR expiry in seconds
    is_proxy = db.Column(db.Boolean, default=False)  # Mark if this is a proxy lecture
    proxy_teacher_name = db.Column(db.String(100), nullable=True)  # Name of the proxy teacher

    # Relationships
    attendances = db.relationship("Attendance", back_populates="session", lazy=True)
    class_obj = db.relationship("ClassModel", back_populates="sessions", lazy=True)
    teacher = db.relationship("User", backref="sessions")


class WiFiNetwork(db.Model):
    """WiFi network configuration for attendance verification."""

    __tablename__ = "wifi_networks"

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)  # e.g., "Campus WiFi", "Classroom Router"
    router_ip = db.Column(db.String(45), nullable=False)  # IPv4 or IPv6
    subnet_mask = db.Column(db.String(45), nullable=True)  # e.g., "255.255.255.0" or "/24"
    is_active = db.Column(db.Boolean, default=True, nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    created_by = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)  # Teacher who created it

    # Relationships
    creator = db.relationship("User", backref="created_wifi_networks")


class Attendance(db.Model):
    """Attendance record linking a student to a session."""

    __tablename__ = "attendance"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    session_id = db.Column(db.Integer, db.ForeignKey("sessions.id"), nullable=False, index=True)
    timestamp = db.Column(
        db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc)
    )
    wifi_network_id = db.Column(db.Integer, db.ForeignKey("wifi_networks.id"), nullable=True)  # Track which WiFi was used
    client_ip = db.Column(db.String(45), nullable=True)  # Store the client IP for verification

    user = db.relationship("User", back_populates="attendances")
    session = db.relationship("SessionModel", back_populates="attendances")
    wifi_network = db.relationship("WiFiNetwork", backref="attendances")

    __table_args__ = (
        db.UniqueConstraint("user_id", "session_id", name="uq_attendance_user_session"),
    )


class Department(db.Model):
    """Department model for organizing academic departments."""
    
    __tablename__ = "departments"
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    code = db.Column(db.String(10), nullable=False, unique=True)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    branches = db.relationship("Branch", back_populates="department", lazy=True, cascade="all, delete-orphan")


class Branch(db.Model):
    """Branch model for organizing branches within departments."""
    
    __tablename__ = "branches"
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    code = db.Column(db.String(10), nullable=False)
    department_id = db.Column(db.Integer, db.ForeignKey("departments.id"), nullable=False, index=True)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    department = db.relationship("Department", back_populates="branches")
    classes = db.relationship("ClassModel", back_populates="branch", lazy=True)
    
    __table_args__ = (
        db.UniqueConstraint("code", "department_id", name="uq_branch_code_department"),
    )


class Semester(db.Model):
    """Semester model for academic semesters (1-8)."""
    
    __tablename__ = "semesters"
    
    id = db.Column(db.Integer, primary_key=True)
    number = db.Column(db.Integer, nullable=False, unique=True)
    name = db.Column(db.String(50), nullable=False)
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    
    # Relationships
    classes = db.relationship("ClassModel", back_populates="semester", lazy=True)


class AttendanceOverride(db.Model):
    """Track manual attendance changes by teachers within the 1-hour window."""
    
    __tablename__ = "attendance_overrides"
    
    id = db.Column(db.Integer, primary_key=True)
    session_id = db.Column(db.Integer, db.ForeignKey("sessions.id"), nullable=False, index=True)
    student_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    action = db.Column(ENUM("mark_present", "mark_absent", name="override_action"), nullable=False)
    timestamp = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    reason = db.Column(db.Text, nullable=True)
    
    # Relationships
    session = db.relationship("SessionModel", backref="overrides")
    student = db.relationship("User", foreign_keys=[student_id], backref="attendance_overrides_received")
    teacher = db.relationship("User", foreign_keys=[teacher_id], backref="attendance_overrides_made")


class PasswordLog(db.Model):
    """Track password changes for security auditing."""
    
    __tablename__ = "password_logs"
    
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    admin_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, index=True)
    action = db.Column(ENUM("created", "updated", "reset", name="password_action"), nullable=False)
    method = db.Column(ENUM("manual", "auto_generated", "bulk_upload", name="password_method"), nullable=False)
    timestamp = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    ip_address = db.Column(db.String(45), nullable=True)
    user_agent = db.Column(db.Text, nullable=True)
    notes = db.Column(db.Text, nullable=True)
    
    # Relationships
    user = db.relationship("User", foreign_keys=[user_id], backref="password_logs")
    admin = db.relationship("User", foreign_keys=[admin_id], backref="admin_password_logs")


